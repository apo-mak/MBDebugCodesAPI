{
  "info": {
    "version": "1.0.0",
    "title": "MBDebugCodes API Interface",
    "contact": {
      "name": "apo-mak",
      "url": "https://github.com/apo-mak"
    },
    "x-gitrows-repository": "https://github.com/apo-mak/MBDebugCodesAPI/blob/master/Data_source/gigabyte/trx40/aorus/extreme/mb_gigabyte_trx40_aorus_xtreme.csv",
    "x-gitrows-api-path": "@github/apo-mak/MBDebugCodesAPI/Data_source/gigabyte/trx40/aorus/extreme/mb_gigabyte_trx40_aorus_xtreme.csv",
    "description": "\n\n---\n\nCreated with [GitRows](https://gitrows.com)"
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "documentation": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          }
        }
      },
      "Record": {
        "type": "object",
        "properties": {
          "Code": {
            "type": "integer",
            "format": "int32",
            "description": "Motherboard Debug Code (MDC)"
          },
          "Description": {
            "type": "string",
            "description": "MDC Description"
          },
          "Type": {
            "type": "string",
            "description": "Code Type ( Normal Boot, Recovery, Error)"
          }
        }
      }
    }
  },
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://api.gitrows.com"
    }
  ],
  "paths": {
    "/@github/apo-mak/MBDebugCodesAPI/Data_source/gigabyte/trx40/aorus/extreme/mb_gigabyte_trx40_aorus_xtreme.csv": {
      "get": {
        "description": "Return a list of records",
        "operationId": "listRecords",
        "parameters": [
          {
            "in": "query",
            "name": "Code",
            "schema": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "description": "Select records that match value for `Code`.\n\nYou can optionally use the following comparison operators as prefixes to your values, e.g. `Code=gt:10`:\n\n`not:` equals not; `lt:` less than; `lte:` less than or equal; `gt:` greater than; `gte:` greater than or equal",
            "allowReserved": true
          },
          {
            "in": "query",
            "name": "Description",
            "schema": {
              "type": "string"
            },
            "description": "Select records that match value for `Description`.\n\nYou can optionally use the following comparison operators as prefixes to your values, e.g. `Description=*:foo`:\n\n`starts:` text starts with, alias: `^:`; `contains:` contains text, alias: `*:`; `ends:` text ends with, alias: `$:`",
            "allowReserved": true
          },
          {
            "in": "query",
            "name": "Type",
            "schema": {
              "type": "string"
            },
            "description": "Select records that match value for `Type`.\n\nYou can optionally use the following comparison operators as prefixes to your values, e.g. `Type=*:foo`:\n\n`starts:` text starts with, alias: `^:`; `contains:` contains text, alias: `*:`; `ends:` text ends with, alias: `$:`",
            "allowReserved": true
          },
          {
            "in": "query",
            "name": "$count",
            "schema": {
              "type": "string"
            },
            "description": "Counts the records in the data set, use `*` or any `columnName` as parameter",
            "allowReserved": true
          },
          {
            "in": "query",
            "name": "$avg",
            "schema": {
              "type": "string"
            },
            "description": "Calculates the average of all numeric values in `columnName`",
            "allowReserved": true
          },
          {
            "in": "query",
            "name": "$sum",
            "schema": {
              "type": "string"
            },
            "description": "Calculates the sum of all numeric values in `columnName`",
            "allowReserved": true
          },
          {
            "in": "query",
            "name": "$min",
            "schema": {
              "type": "string"
            },
            "description": "Returns the smallest of all numeric values in `columnName`",
            "allowReserved": true
          },
          {
            "in": "query",
            "name": "$max",
            "schema": {
              "type": "string"
            },
            "description": "Returns the largest of all numeric values in `columnName`",
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "A list of records with any optionally provided filters applied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Record"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  }
}